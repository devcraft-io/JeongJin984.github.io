<feed xmlns="http://www.w3.org/2005/Atom"> <id>http://localhost:4000</id><title>Jiny</title><subtitle>Jiny's Information</subtitle> <updated>2021-01-12T20:04:59+09:00</updated> <author> <name>Nam Jeong Jin</name> <uri>http://localhost:4000</uri> </author><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000" rel="alternate" type="text/html" /> <generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator> <rights> © 2021 Nam Jeong Jin </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Spring Security2</title><link href="http://localhost:4000/posts/Spring-Security2/" rel="alternate" type="text/html" title="Spring Security2" /><published>2021-01-09T14:09:00+09:00</published> <updated>2021-01-09T14:09:00+09:00</updated> <id>http://localhost:4000/posts/Spring-Security2/</id> <content src="http://localhost:4000/posts/Spring-Security2/" /> <author> <name>Nam Jeong Jin</name> </author> <category term="Java" /> <category term="Spring" /> <summary> Spring Security-2 DelegatingFilterProxy Spring Security가 모든 App 요청을 감싸게 해서 보안이 적용되게 하는 서블릿 필터 서블릿 필터는 스프링에서 정의된 빈을 주입해서 사용할 수 없음 특정한 이름을 가진 스프링 빈을 찾아 그 빈에게 요청을 위임 springSecurityFilterChain 이름으로 생성된 빈을 ApplicationContext에서 찾아 요청을 위임 실제 보안처리는 하지 않음 &amp;lt;filter&amp;gt; &amp;lt;filter-name&amp;gt;springSecurityFilterChain&amp;lt;/filter-name&amp;gt; &amp;lt;filter-class&amp;gt;... </summary> </entry> <entry><title>Spring Security</title><link href="http://localhost:4000/posts/Spring-Security/" rel="alternate" type="text/html" title="Spring Security" /><published>2021-01-09T14:09:00+09:00</published> <updated>2021-01-09T14:09:00+09:00</updated> <id>http://localhost:4000/posts/Spring-Security/</id> <content src="http://localhost:4000/posts/Spring-Security/" /> <author> <name>Nam Jeong Jin</name> </author> <category term="Java" /> <category term="Spring" /> <summary> Spring Security Spring Security? 스프링 시큐리티는 스프링 기반의 애플리케이션의 보안(인증과 권한, 인가 등)을 담당하는 하위 프레임 워크 기본용어 접근 주체: 보호된 리소스에 접근하는 대상 인증(Authentication): 보호된 리소스에 접근한 대상에 대해 누구인지, App의 작업을 수행해도 되는 주체인지 확인하는 과정을 즉 누구인지 인가(Authorize): 해당 리소스에 대해 접근 권한을 가지고 있는지 확인하는 과정 즉 무엇을 할 수 있는지 권한: 인가 과정에서 해당 리소스에 대한 최소한의 권한을 가졌는지 확인 Spring Security 특징과 구조 보안과 ... </summary> </entry> <entry><title>Java Interface</title><link href="http://localhost:4000/posts/Java-Interface/" rel="alternate" type="text/html" title="Java Interface" /><published>2021-01-09T14:09:00+09:00</published> <updated>2021-01-09T13:12:23+09:00</updated> <id>http://localhost:4000/posts/Java-Interface/</id> <content src="http://localhost:4000/posts/Java-Interface/" /> <author> <name>Nam Jeong Jin</name> </author> <category term="Java" /> <category term="Jasic" /> <summary> Java Interface Interface 자바의 다형성을 극대화하여 개발코드 수정을 줄이고 프로그램 유지보수성을 높이기 위해 인터페이스를 사용 Interface 정의 public interface 인터페이스명 { //상수 타입 상수명 = 값; //추상 메소드 타입 메소드명(매개변수, ... ); //디폴트 메소드 default 타입 메소드명(매개변수, ... ){ //구현부 } //정적 메소드 static 타입 메소드명(매개변수) { //구현부 } 상수 : 인터페이스에서 값을 정해줄테니 함부로 바꾸지 말고 제공해주는 값만 참조 (절대적) 추상메소드 : 가이드 제공, 추상메소드를 오버라이팅해서 재구현 (강제적) 디폴트메소드 : 인터페이스에서 기본적으로 ... </summary> </entry> <entry><title>Spring Maven</title><link href="http://localhost:4000/posts/Spring-maven/" rel="alternate" type="text/html" title="Spring Maven" /><published>2021-01-01T12:13:00+09:00</published> <updated>2021-01-09T11:53:57+09:00</updated> <id>http://localhost:4000/posts/Spring-maven/</id> <content src="http://localhost:4000/posts/Spring-maven/" /> <author> <name>Nam Jeong Jin</name> </author> <category term="Java" /> <category term="Spring" /> <summary> Maven 설정 자바 소스 설정 &amp;lt;build&amp;gt; &amp;lt;sourceDirectory&amp;gt;src/main/java&amp;lt;/sourceDirectory&amp;gt; &amp;lt;/build&amp;gt; 자바소스 여러 개 설정 &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.codehaus.mojo&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;build-helper-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.2&amp;lt;/version&amp;gt; &amp;lt;executions&amp;gt; &amp;lt;execution&amp;gt; &amp;lt;id&amp;gt;add-source-dir&amp;lt;/i... </summary> </entry> <entry><title>Java package</title><link href="http://localhost:4000/posts/Java-package/" rel="alternate" type="text/html" title="Java package" /><published>2021-01-01T11:08:00+09:00</published> <updated>2021-01-09T11:46:17+09:00</updated> <id>http://localhost:4000/posts/Java-package/</id> <content src="http://localhost:4000/posts/Java-package/" /> <author> <name>Nam Jeong Jin</name> </author> <category term="Java" /> <category term="Jasic" /> <summary> Package Package 클래스명의 고유성을 보장하기 위해서 사용 클래스를 구분짓는 폴더 개념 자바는 패키지의 가장 상위 디렉토리(root) 에서 실행해야한다는 약속이 있기 때문에 해당 패키지로 가서 컴파일 하지 않는다. 소스에 가장 첫 줄에 있어야하고, 패키지 선언은 소스 하나에 하나만 있어야한다. 패키지 이름과 위치한 폴더의 이름이 같아야한다. 패키지이름을 java로 시작하면 안된다. 모든 자바 패키지들은 가장 상위 패키지인 java와 javax 패키지에 종속 패키지를 정해주지 않는다면, 클래스는 기본적으로 “default package”에 속하게 되고 “default package”는 아무런 패키지 이름을 가지지 않는다. 패키지 명 ... </summary> </entry> </feed>
